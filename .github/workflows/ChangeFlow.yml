 # This workflow uses ServiceNow custom actions that are certified by ServiceNow.


name: CICD GitHub workflow 
on: workflow_dispatch
  # push: 
  #  branches:  ["main" ]
  # pull_request:
  #   branches: [ "main" ]
  #   types: [opened, synchronize,reopened]
 
# on: 
#   schedule:
#     - cron: '*/2 * * * *'

jobs:
  build:
    name: 'Build' 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean compile

  change:
    name: Change Request
    needs: build
    runs-on: ubuntu-latest
    steps:     
      - name: ServiceNow DevOps Change Attributes
        uses: ServiceNow/servicenow-devops-change@dev
        with:
          #devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          #devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          devops-integration-token: ${{ secrets.SN_INSTANCE_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Change Request'
          change-request: '{"autoCloseChange":true,"attributes":{"short_description":"Automated Software Deployment","chg_model":"007c4001c343101035ae3f52c1d3aeb2","description":"Automated Test Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
          # changeCreationTimeOut: ;'1000'
          # deployment-gate: '{"environment":"prod","jobName":"Deploy"}'
        
  # deploy:
  #   name: 'Deploy'
  #   needs: change
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   steps:
  #     - name: Run deployment scripts
  #       run: echo Completed Deployment. 

  getchange:
    # jobs that  must complete successfully before this job will run
    needs: change
    # type of machine to run the job on
    runs-on: ubuntu-latest
    name: 'ServiceNow DevOps Get Change'
    outputs:
      change-request-number: ${{ steps.get_change.outputs.change-request-number }}
    steps:
      - name: ServiceNow DevOps Get Change
        # You may pin to the exact commit or the version.
        # uses: ServiceNow/servicenow-devops-get-change@0f8b1914adeaec764a4286bdd9cba73ed1c6097f
        uses: ServiceNow/servicenow-devops-get-change@dev
        id: get_change
        with:
          # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # Devops Integration Token
          devops-integration-token: ${{ secrets.SN_INSTANCE_TOKEN }}
          #devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
          #devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
          # Orchestration Tool Id
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # Github Context
          context-github: ${{ toJSON(github) }}
          # The inputs to identify change at Servicenow and GET it.
          change-details: '{"build_number":"","pipeline_name":"","stage_name":"Change Request"}'

      # - name: Output of ServiceNow DevOps Get Change
      #   run: echo 'Output of ServiceNow DevOps Get Change is -> change-request-number = ${{ steps.get_change.outputs.change-request-number }}' >> $GITHUB_OUTPUT

  updatechange:
    # jobs that must complete successfully before this job will run
    needs: getchange
    # type of machine to run the job on
    runs-on: ubuntu-latest
    name: 'ServiceNow DevOps Update Change'
    steps:
      - name: ServiceNow DevOps Update Change
        # You may pin to the exact commit or the version.
        # uses: ServiceNow/servicenow-devops-update-change@66d51cb13684d8287a763bc3f4dc4531c6ab3306
        uses: ServiceNow/servicenow-devops-update-change@dev
        id: update_change
        with:
          # ServiceNow Instance URL
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          # ServiceNow Devops security token
          devops-integration-token: ${{ secrets.SN_INSTANCE_TOKEN }}
          #devops-integration-user-name: '${{ secrets.SN_DEVOPS_USER }}'
          #devops-integration-user-password: '${{ secrets.SN_DEVOPS_PASSWORD }}'
          # Orchestration Tool Id of the tool created in ServiceNow
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          # Github Context
          context-github: ${{ toJSON(github) }}
          # Change Request Number to be Updated
          change-request-number: ${{needs.getchange.outputs.change-request-number}}
          # The customized inputs to create change with the requested details.
          change-request-details: '{"state":"3","close_code":"successful_issues","close_notes":"Test results successful"}'
          
      # - name: Outcome of ServiceNow DevOps Update Change
      #   run: echo 'Outcome of ServiceNow DevOps Update Change is -> ${{ steps.update_change.outputs.status }}'  >> $GITHUB_OUTPUT       
